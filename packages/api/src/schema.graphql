type User {
  id: ID!
  email: String!
  name: String!
  surname: String!
  avatar: String!
  createdAt: String!
  updatedAt: String!
}

type Session {
  id: ID!
  accessToken: String!
  refreshToken: String!
  createdAt: String!
  updatedAt: String!
}

type Dialog {
  id: ID!
  users: [User]!
  dialogProps: [DialogProps]!
  lastMessage: String
  lastMessageDate: String
  group: Boolean!
}

type DialogProps {
  id: ID!
  user: User!
  userRole: DIALOG_USER_ROLES!
  unreadMessages: Int
  lastMessageStatus: MESSAGE_STATUSES
}

type UserAndSession {
  user: User!
  session: Session
}

type Query {
  user(email: String!): User!
  searchUsers(email: String!, selfEmail: String!): [User]!
  dialog(dialogId: String!): Dialog!
  dialogs(userId: String!): [Dialog!]!
}

# Mutations and inputs for mutations

input SignUpInput {
  email: String!
  name: String!
  surname: String!
  password: String!
}

input SignInInput {
  email: String!
  password: String!
  rememberUser: Boolean!
}

input CreateDialogInput {
  userId: String!
  role: DIALOG_USER_ROLES!
}

type Mutation {
  signUp(input: SignUpInput!): UserAndSession!
  signIn(input: SignInInput!): UserAndSession!
  refreshSession(refreshToken: String!): Session!
  createDialog(input: [CreateDialogInput]!): Dialog
}

#Subscriptions and inputs for subscriptions

type Subscription {
  dialogCreated(userId: String!): Dialog!
}

# Other ...
enum DIALOG_USER_ROLES {
  ADMIN
  USER
}

enum MESSAGE_STATUSES {
  SENDED
  RECIVED
  READED
}

#Schema type

schema {
  query: Query
  mutation: Mutation
}
